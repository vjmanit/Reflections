When would you want to use a remote repository rather than keeping all your work
local?
    When two or more  users are working on a project seperately we should use a remote repository.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	Changes are the reason for conflicts.Suppose you want to add a feature and that consist of several commits and you have done many of the commits but not all and took the rest for sometime.Automatic pull will update to all the users working on a project and they may work on that feature that may cause conflict.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	fork-it is used to directly clone from one github account to another
	clone-it is used to clone from one github account our pc
	branches-it is used for changing in a file seperately with more than one branchs and we can push or pop any of the branches from github or your local git. 

What is the benefit of having a copy of the last known state of the remote stored locally?
	You can work offline, it saves a lot of data overhead when pushing changes to github and it gives the possibility to do a quick check which changes are made in the online repo compared to the offline repository.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Without using git and github we can collaborate using emails.There is only advantage of not using git or github is that we don't have to learn how to use git or github but it is harder to control version without using github.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	When more people are working on a project then we should make changes in seperate branches to avoid conflict.
	You want to make changes in a different branch so that the master branch always stays in a working state. By using a different branch, you can push your changes to GitHub for review by other people, without directly messing up the master branch.
    For small changes it is a lot quicker to make them directly in the master branch, but this comes with a risk.


Commands used:
	git remote  |    Show all remote locations for the repository
	git remote add origin url |     Add a new remote location for the repository. Origin is the default name to use when you create only one remote location. Url should be the https url to the github repository.
	git remove -v  |    Outputs the remote locations with verbose information (fetch and push urls)
	git push origin master  |    Push the master branch to the remote location origin.
	git pull origin master  |    Get the master branch from the remote location origin.
	git pull origin master  |    = Git fetch origin + git merge master origin/master
	git fetch origin  |    Get the changes from the remote location into the (hidden?) origin/master branch
  